//Autogenerated Neural Network
//by NXT neural network manager
//Made by Bram vd Vlist and Rick vd Westelaken (2007)
//hacked by pp106
//used by jesmasta

package sieci;
public class nn_kolor_pola{
int inputSize = 3;
int hiddenSize = 3;
int outputSize = 3;
double[] hiddenValues = new double[hiddenSize];
double[] outputValues = new double[outputSize];
double[] inputValues = new double[inputSize];
double[][] hiddenWeights = new double[][]{
{-13.24234194256806,9.613510345021991,6.032922266905068},
{14.008131870366277,-12.72525625800408,-13.042082590308846},
{13.476583642461367,-9.088386310339983,-5.607734672722673}
};

double[][] outputWeights = new double[][]{
{-9.702241579762186,-17.41656191957426,11.157262685066826},
{9.90005438278691,-8.96668168822039,-10.175633493186819},
{-12.769700103100648,6.207514969476655,-0.8049164812657078}
};

public void calcHiddenValues(){
  double sum=0;
  for (int h=0;h<hiddenSize;h++){
    sum=0;
    for (int i=0;i<inputSize;i++){
      sum += hiddenWeights[h][i] * inputValues[i];
    }
    hiddenValues[h] = (1.0 / (1.0 + Math.exp(-sum)));
  }
}

public void calcOutputValues(){
  double sum=0;
  for (int out=0;out<outputSize;out++){
    sum=0;
    for (int h=0;h<hiddenSize;h++){
      sum += outputWeights[out][h] * hiddenValues[h];
    }
    outputValues[out] = (1.0 / (1.0 + Math.exp(-sum)));
  }
}
public int outputValue(){
  int out = -1;
double max=-100.0;
  for (int i=0;i<outputSize;i++){
    if (outputValues[i] > max){
    max=outputValues[i];
      out=i;
    }
  }
  return out;
}
public int getClass(double[] Input){
  inputValues = Input;
  calcHiddenValues();
  calcOutputValues();
  return outputValue();
}

}